#!/usr/bin/env node

"use strict";
const Rtpengine = require("commander");
const Bluebird = require("bluebird");
const Client = require("../lib/Client");
const _ = require("lodash");
const pkg = require("../package.json");

Rtpengine
    .version(pkg.version)
    .option("-H, --host <ip address>", "host rtpengine is running on", _.identity)
    .option("-P, --port <port>", "port rtpengine is listening on", parseInt)
    .option("-T, --timeout <milliseconds>", "number of milliseconds to wait before retrying a request", parseInt)
    .option("-R, --retries <count>", "number of times to retry a request", parseInt);

function createClient() {
    return new Client(_.pick(Rtpengine, "port", "host", "retries", "timeout"));
}

Rtpengine
    .command("ping")
    .description("ping an rtpengine instance")
    .action(function () {
        Bluebird.using(createClient(), function (client) {
            return client
                .ping()
                .then(function (result) {
                    console.log(JSON.stringify(result, null, "  "));
                }).finally(() => {
					client.destroy();
                });
        });
    });

Rtpengine
    .command("list")
    .option("-l, --limit <limit>", "limit the number of calls to return", parseInt, 32)
    .description("list calls")
    .action(function (options) {
        Bluebird.using(createClient(), function (client) {
            return client
                .list(_.pick(options, "limit"))
                .then(function (result) {
                    console.log(JSON.stringify(result, null, "  "));
                }).finally(() => {
					client.destroy();
				});
        });
    });

Rtpengine
    .command("query <callId>")
    .option("-f, --from-tag <from-tag>", "from tag associated with a call leg")
    .option("-t, --to-tag <to-tag>", "to tag associated with a call leg")
    .description("search for calls")
    .action(function (callId, options) {
        options = _.merge(options, {callId: callId});
        Bluebird.using(createClient(), function (client) {
            options = _.merge(options, {callId: callId});

            return client
                .query(_.pick(options, "callId", "fromTag", "toTag"))
                .then(function (result) {
                    console.log(JSON.stringify(result, null, "  "));
                }).finally(() => {
					client.destroy();
				});
        });
    });

Rtpengine
    .command("delete <callId> <fromTag>")
    .option("-t, --to-tag <to-tag>", "to tag associated with a call leg")
    .option("-f, --via-tag <via-tag>", "via tag associated with a call leg")
    .description("delete a call")
    .action(function (callId, fromTag, options) {
        Bluebird.using(createClient(), function (client) {
            options = _.merge(options, {callId: callId, fromTag: fromTag});

            return client
                .delete(_.pick(options, "callId", "fromTag", "toTag", "viaTag"))
                .then(function (result) {
                    console.log(JSON.stringify(result, null, "  "));
                }).finally(() => {
					client.destroy();
				});
        });
    });

Rtpengine.parse(process.argv);

if (!process.argv.slice(2).length) {
    Rtpengine.outputHelp();
}
